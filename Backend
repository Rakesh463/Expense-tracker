2.1 Initialize Backend
Navigate to the backend/ folder and initialize a Node.js project.

bash
cd expense-tracker/backend
npm init -y
npm install express mongoose cors dotenv

2.2 Create MongoDB Connection (db.js)
Create a config/db.js file to connect to MongoDB.
// backend/config/db.js
const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB Connected');
  } catch (error) {
    console.error(error.message);
    process.exit(1);
  }
};

module.exports = connectDB;

2.3 Define the Expense Model (Expense.js)
Create a models/Expense.js file.

// backend/models/Expense.js
const mongoose = require('mongoose');

const ExpenseSchema = new mongoose.Schema({
  title: { type: String, required: true },
  amount: { type: Number, required: true },
  category: { type: String, required: true },
  date: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Expense', ExpenseSchema);

2.4 Create Controller for Expenses (expenseController.js)
Create a controllers/expenseController.js file.

// backend/controllers/expenseController.js
const Expense = require('../models/Expense');

exports.getExpenses = async (req, res) => {
  try {
    const expenses = await Expense.find();
    res.json(expenses);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.addExpense = async (req, res) => {
  const { title, amount, category } = req.body;
  try {
    const newExpense = new Expense({
      title,
      amount,
      category,
    });
    await newExpense.save();
    res.json(newExpense);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.editExpense = async (req, res) => {
  const { id } = req.params;
  const { title, amount, category } = req.body;
  try {
    const updatedExpense = await Expense.findByIdAndUpdate(
      id,
      { title, amount, category },
      { new: true }
    );
    res.json(updatedExpense);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.deleteExpense = async (req, res) => {
  const { id } = req.params;
  try {
    await Expense.findByIdAndDelete(id);
    res.json({ message: 'Expense deleted' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
2.5 Create Routes (expenses.js)
Create a routes/expenses.js file.

// backend/routes/expenses.js
const express = require('express');
const {
  getExpenses,
  addExpense,
  editExpense,
  deleteExpense,
} = require('../controllers/expenseController');

const router = express.Router();

router.get('/', getExpenses);
router.post('/', addExpense);
router.put('/:id', editExpense);
router.delete('/:id', deleteExpense);

module.exports = router;
2.6 Set Up the Express Server (server.js)
Create a server.js file in the backend/ folder.

// backend/server.js
const express = require('express');
const connectDB = require('./config/db');
const expenses = require('./routes/expenses');
const cors = require('cors');
const dotenv = require('dotenv');

dotenv.config();

const app = express();

connectDB();

app.use(cors());
app.use(express.json());

app.use('/api/expenses', expenses);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
2.7 Create a .env File
In the backend/ folder, create a .env file to store environment variables.

bash
Copy code
MONGO_URI=mongodb://localhost:27017/expense-tracker
